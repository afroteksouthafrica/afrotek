name: Deploy Product Service (staging)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'services/product-service/**'
      - '.github/workflows/deploy-product.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE_PRODUCT }}
      IMAGE_NAME: afrotek/product-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        working-directory: services/product-service
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .

      - name: Tag & Push to ECR
        env:
          ECR: ${{ env.ECR_REGISTRY }}
        run: |
          docker tag $IMAGE_NAME:${{ github.sha }} $ECR/$IMAGE_NAME:${{ github.sha }}
          docker tag $IMAGE_NAME:latest $ECR/$IMAGE_NAME:latest
          docker push $ECR/$IMAGE_NAME:${{ github.sha }}
          docker push $ECR/$IMAGE_NAME:latest

      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(aws ecr describe-images --repository-name $IMAGE_NAME --image-ids imageTag=${{ github.sha }} --query 'imageDetails[0].imageDigest' --output text)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Update ECS service (pin by digest, set APP_REV)
        env:
          IMAGE_URI: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}
        run: |
          # fetch current task def
          TD_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].taskDefinition' --output text)
          aws ecs describe-task-definition --task-definition $TD_ARN > td.json

          # produce new container defs with new image + env var APP_REV
          node -e "const fs=require('fs');const td=JSON.parse(fs.readFileSync('td.json','utf8')).taskDefinition;
          const cd=td.containerDefinitions.map(c=>{
            if(c.name==='product'){c.image=process.env.IMAGE_URI;
              const i=c.environment.findIndex(e=>e.name==='APP_REV');
              if(i>=0)c.environment[i].value='${{ github.sha }}'; else c.environment.push({name:'APP_REV',value:'${{ github.sha }}'});
            }
            return c;
          });
          const out={ family: td.family, taskRoleArn: td.taskRoleArn, executionRoleArn: td.executionRoleArn, networkMode: td.networkMode, containerDefinitions: cd, requiresCompatibilities: td.requiresCompatibilities, cpu: td.cpu, memory: td.memory, runtimePlatform: td.runtimePlatform };
          fs.writeFileSync('td-new.json', JSON.stringify(out));
          "

          # register new task def
          NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td-new.json --query 'taskDefinition.taskDefinitionArn' --output text)

          # update service to new task def
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TD_ARN

      - name: Deploy summary
        run: |
          echo 'Deployed product-service to' $ECS_CLUSTER '/' $ECS_SERVICE
          echo 'Image:' ${{ env.IMAGE_URI }}
          echo 'APP_REV:' ${{ github.sha }}
